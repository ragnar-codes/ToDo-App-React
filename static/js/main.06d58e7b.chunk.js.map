{"version":3,"sources":["components/Todo.js","components/Form.js","components/FilterButton.js","App.js","index.js"],"names":["Todo","props","useState","isEditing","setEditing","newName","setNewName","editingTemplate","className","onSubmit","e","preventDefault","editTask","id","htmlFor","name","type","value","onChange","target","onClick","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","Form","setName","addTask","autoComplete","FilterButton","isPressed","setFilter","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","editedTaskList","map","updatedTasks","remainingTasks","taskList","filterList","tasksNoun","length","headingText","newTask","nanoid","role","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.06d58e7b.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nexport default function Todo(props){\r\n    const [isEditing, setEditing] = useState(false);\r\n    const [newName, setNewName] = useState('');\r\n    function handleChange(e){\r\n      setNewName(e.target.value);\r\n    }\r\n    function handleSubmit(e){\r\n      e.preventDefault();\r\n      props.editTask(props.id, newName);\r\n      setNewName('');\r\n      setEditing(false);\r\n    }\r\n    const editingTemplate = (\r\n      <form className=\"stack-small\" onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <label className=\"todo-label\" htmlFor={props.id}>\r\n            New name for {props.name}\r\n          </label>\r\n          <input id={props.id} className=\"todo-text\" type=\"text\" value={newName} onChange={handleChange} />\r\n        </div>\r\n        <div className=\"btn-group\">\r\n          <button type=\"button\" className=\"btn todo-cancel\" onClick={()=> setEditing(false)}>\r\n            Cancel\r\n            <span className=\"visually-hidden\">renaming {props.name}</span>\r\n          </button>\r\n          <button type=\"submit\" className=\"btn btn__primary todo-edit\">\r\n            Save\r\n            <span className=\"visually-hidden\">new name for {props.name}</span>\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n    const viewTemplate = (\r\n      <div className=\"stack-small\">\r\n        <div className=\"c-cb\">\r\n            <input\r\n              id={props.id}\r\n              type=\"checkbox\"\r\n              defaultChecked={props.completed}\r\n              onChange={() => props.toggleTaskCompleted(props.id)}\r\n            />\r\n            <label className=\"todo-label\" htmlFor={props.id}>\r\n              {props.name}\r\n            </label>\r\n          </div>\r\n          <div className=\"btn-group\">\r\n            <button type=\"button\" className=\"btn\" onClick={()=> setEditing(true)}>\r\n              Edit <span className=\"visually-hidden\">{props.name}</span>\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn__danger\"\r\n              onClick={() => props.deleteTask(props.id)}\r\n            >\r\n              Delete <span className=\"visually-hidden\">{props.name}</span>\r\n            </button>\r\n          </div>\r\n      </div>\r\n    );\r\n    return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\r\n}\r\n\r\n","import React, {useState} from \"react\";\r\n\r\n\r\n\r\nexport default function Form(props){\r\n  const [name, setName] = useState('');\r\n  function handleChange(e){\r\n    setName(e.target.value);\r\n  }\r\n  \r\n  function handleSubmit(e){\r\n    e.preventDefault();\r\n    props.addTask(name);\r\n    setName(\"\");\r\n  }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n        <h2 className=\"label-wrapper\">\r\n          <label htmlFor=\"new-todo-input\" className=\"label__lg\">\r\n            What needs to be done?\r\n          </label>\r\n        </h2>\r\n        <input\r\n          onChange={handleChange}\r\n          value={name}\r\n          type=\"text\"\r\n          id=\"new-todo-input\"\r\n          className=\"input input__lg\"\r\n          name=\"text\"\r\n          autoComplete=\"off\"\r\n        />\r\n        <button type=\"submit\" className=\"btn btn__primary btn__lg\">\r\n          Add\r\n        </button>\r\n      </form>\r\n    );\r\n}","import React from \"react\";\r\n\r\nexport default function FilterButton(props){\r\n    return (\r\n        <button type=\"button\" className=\"btn toggle-btn\" \r\n        aria-pressed={props.isPressed} onClick={()=> props.setFilter(props.name)}>\r\n          <span className=\"visually-hidden\">Show </span>\r\n          <span>{props.name}</span>\r\n          <span className=\"visually-hidden\"> tasks</span>\r\n        </button>\r\n    );\r\n}","import React, {useState} from \"react\";\nimport {nanoid} from \"nanoid\";\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n  function addTask(name){\n    const newTask = {id: 'todo-' + nanoid(), name: name, completed: false};\n    setTasks([...tasks, newTask]);\n  }\n  function editTask(id, newName){\n    const editedTaskList = tasks.map(task => {\n      //if this task has the same ID as the edited task\n      if(id === task.id){\n        return  {...task, name: newName};\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n  function toggleTaskCompleted(id){\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n      // use object spread to make a new object\n      // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n    }\n    return task;\n  });\n    setTasks(updatedTasks);\n  }\n  function deleteTask(id){\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks)\n  }\n\n  const taskList = tasks\n  .filter(FILTER_MAP[filter])\n  .map(task => (\n  <Todo\n    id={task.id}\n    name={task.name}\n    completed={task.completed}\n    key={task.id}\n    toggleTaskCompleted={toggleTaskCompleted}\n    deleteTask={deleteTask}\n    editTask={editTask}\n  />\n  ));\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton key={name} name={name} isPressed={name === filter}\n    setFilter={setFilter}/>\n  ));\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>ToDo App</h1>\n      <Form addTask = {addTask} />\n      <div className=\"filters btn-group stack-exception\">\n        {filterList}   \n      </div>\n      <h2 id=\"list-heading\">\n        {headingText}\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nconst DATA = [\n    {id: \"todo-0\", name: \"Eat\", completed: true},\n    {id: \"todo-1\", name: \"Sleep\", completed: false},\n    {id: \"todo-2\", name: \"Repeat\", completed: false}\n];\n\nReactDOM.render(<App tasks={DATA} />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}